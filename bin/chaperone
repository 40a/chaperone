#!/usr/bin/python3
# -*- mode: python -*-

"""
Lightweight process and service manager

Usage:
    chaperone [--user=<name>]
              [--config=<file_or_dir>] 
              [--shutdown_on_exit] [--nodelay] [--debug]
              [--log-level=<level>]
              [<command> [<args> ...]]

Options:
    -v                       Provide verbose messages
    --user=<name>            Start first process as user (else root)
    --config=<file_or_dir>   Specifies file or directory for configuration [default: /etc/chaperone.d]
    --shutdown_on_exit       If set, then the entire system will be shutdown when the given command (if any)
                             terminates.
    --nodelay                Eliminates delay before initial command prompt when there are services.
    --debug                  Turn on debugging features
    --log-level=<level>      Specify log level filtering, such as INFO, DEBUG, etc.

If a user is specified, then the basename of file_or_dir is searched in the user's directory, and it
must be owned by the user to take effect.
"""

import sys
import os
import asyncio
import logging
from setproctitle import setproctitle
from functools import partial
from docopt import docopt

# Assure that packages in the same directory as ours (bin) can be used without concern for where
# we are installed
sys.path[0] = os.path.dirname(sys.path[0])

from cproc import TopLevelProcess
from cutil.config import Configuration
from cutil.logging import warn, info, debug, set_log_level

options = docopt(__doc__, options_first=True)
print(options)
if options['--debug']:
   options['--log-level'] = "DEBUG"
   debug('OPTIONS', options)

lev = options.get('--log-level')
if lev:
   levid = getattr(logging, lev.upper())
   if not levid:
      print("Invalid log level: {0}".format(lev))
   else:
      set_log_level(levid)

tlp = TopLevelProcess.sharedInstance()
if options['--debug']:
   tlp.debug = True

cmd = options['<command>']

config = Configuration.configFromCommandSpec(options['--config'], user=options['--user'])

if tlp.debug:
   config.dump()

@asyncio.coroutine
def run_command():
   sproc = tlp.run([cmd] + options['<args>'], user=(options.get('--user')), wait=True, config=config)
   yield from sproc
   if options['--shutdown_on_exit']:
      tlp.kill_system()

services = tlp.run_services(config)
tlp.activate(services)

proctitle = "[" + os.path.basename(sys.argv[0]) + "]"

if cmd:
   proctitle += " " + cmd  + " " + " ".join(options['<args>'])
   if services and not options['--nodelay']:
      tlp.loop.call_later(1, lambda: tlp.activate(run_command()))
   else:
      tlp.loop.call_soon(lambda: tlp.activate(run_command()))
 
setproctitle(proctitle)

tlp.run_event_loop(config)
