#!/usr/bin/python3

"""
Tool to create processes for various purposes.

Usage:
    proctool [--dump] [--hang] [--wait=seconds] [--ignore-signals] [--exit=code] [--notify=CMD] [MESSAGE]
"""

import signal
import sys
from time import sleep
from docopt import docopt

import os

options = docopt(__doc__)

if options['MESSAGE']:
   sys.stdout.write('proctool says: ' + options['MESSAGE'] + "\n")
   sys.stdout.flush()

if options['--notify']:
   cmd = options['--notify']
   os.system('systemd-notify ' + cmd)

if options['--dump']:
    print("UID:{0} GID:{1} PID:{2} Environment:".format(os.getuid(), os.getgid(), os.getpid()))
    for k,v in os.environ.items():
        print(" {0}={1}".format(k,v))

if options['--ignore-signals']:
    signal.signal(signal.SIGTERM, lambda signum, frame: print("ignoring SIGTERM"))
    signal.signal(signal.SIGHUP, lambda signum, frame: print("ignoring SIGHUP"))
    signal.signal(signal.SIGINT, lambda signum, frame: print("ignoring SIGINT"))
else:
    signal.signal(signal.SIGTERM, lambda signum, frame: not print("received SIGTERM"))
    signal.signal(signal.SIGHUP, lambda signum, frame: not print("received SIGHUP"))
    signal.signal(signal.SIGINT, lambda signum, frame: not print("received SIGINT"))

if len(sys.argv) > 1 and sys.argv[1] == 'NOWAIT':
    exit(0)

if options['--wait']:
    sleep(float(options['--wait']))

if options['--hang']:
    while True:
        sleep(100)

if options['--exit']:
    exit(int(options['--exit']))
